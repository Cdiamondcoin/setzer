#!/usr/bin/env bash
### setzer-bot -- really cool bot
### Usage: setzer bot [options]
### --
###   Options:
### C,config=file        configuration file
### I,interval=seconds   seconds to wait between price checks (default: 60)
### R,resend=seconds     seconds to wait before resending tx (default: 90)
### auto                 run automatically without user intervention
### 
###   Gas options:
### gas-start=gas        starting gas price per tx in Gwei
### gas-inc=gas          amount to increment gas price per tx in Gwei
### gas-max=gas          maximum gas price to pay per tx in Gwei
#set -ex

function log {
  echo "[$(date "+%D %T")] $*"
}

# Initialization

if ! [[ $SETZER_BOT_INIT ]]; then
  export SETZER_BOT_INIT=1
  export SETH_ASYNC=yes

  # Global configuration
  [[ -e /etc/setzer.conf ]] && . /etc/setzer.conf
  
  # Local configuration (via -C or --config)
  # Useful for running multiple bots on one box
  [[ -e $SETZER_CONF ]] && . $SETZER_CONF

  echo "--------- STARTING SETZER BOT ---------"
  echo "Bot started `date`"
  
  [[ $ETH_FROM ]] || errors+=("No default account set. Please set it via ETH_FROM ")
  [[ $SETZER_FEED ]] || errors+=("No price feed set. Please set it via SETZER_FEED ")
  [[ $SETZER_MEDIANIZER ]] || errors+=("No medianizer set. Please set it via SETZER_MEDIANIZER ")
  [[ $SETZER_SOURCES ]] || errors+=("No price sources set. Please set them via SETZER_SOURCES ")
  
  [[ $errors ]] && { printf '%s\n' "${errors[@]}"; exit 1; }


  [[ $SETZER_SPREAD ]] || export SETZER_SPREAD=1

  [[ $SETZER_INTERVAL_SECONDS ]] || export SETZER_INTERVAL_SECONDS=60
  [[ $SETZER_WAIT_FOR_RESEND ]] || export SETZER_WAIT_FOR_RESEND=90

  [[ $SETZER_AUTO ]] && echo AUTO mode ON

  # Gas stuff

  [[ $SETZER_INITIAL_GAS_PRICE ]] || export SETZER_INITIAL_GAS_PRICE=`seth --to-wei 1 gwei`
  [[ $SETZER_GAS_PRICE_INCREMENT ]] || export SETZER_GAS_PRICE_INCREMENT=`seth --to-wei 1 gwei`
  [[ $SETZER_MAX_GAS_PRICE ]] || export SETZER_MAX_GAS_PRICE=`seth --to-wei 10 gwei`
  
  # TODO: these should be automatic
  export ETH_GAS_PRICE=$SETZER_INITIAL_GAS_PRICE

  # NOTE: Nice way to see if bots are updated. Increase this by 1 on new versions :)
  export ETH_GAS=200002


  echo "Default account:     $ETH_FROM"
  echo "Feed address:        $SETZER_FEED"
  echo "Medianizer address:  $SETZER_MEDIANIZER"
  echo "Price sources:       $SETZER_SOURCES"
  echo "Spread to update:    $SETZER_SPREAD %"
  echo ""
  echo "Starting gas price:  $SETZER_INITIAL_GAS_PRICE wei"
  echo "Max gas price:       $SETZER_MAX_GAS_PRICE wei"
  echo "Gas price increment: $SETZER_GAS_PRICE_INCREMENT wei"
  echo ""
  echo "Price check loop:    $SETZER_INTERVAL_SECONDS seconds"
  echo "Resend tx loop  :    $SETZER_WAIT_FOR_RESEND seconds"
  echo "------- INITIALIZATION COMPLETE -------"
fi

# Check if connected to node
syncing=$(seth rpc eth_syncing 2> /dev/null)
peers=$(seth rpc net_peerCount 2> /dev/null)
blockNumber=$(seth block latest number 2> /dev/null || true)
sanity=($(setzer peek "$SETZER_FEED" 2> /dev/null || true))
[[ $syncing == "false" ]] && [[ $peers -gt 0 ]] && [[ $blockNumber -gt 0 ]] && [[ $sanity ]] || { log "Not connected to Ethereum, retry in 5 seconds..."; sleep 5; exec "$0" "$@"; }

expires=$(setzer expires "$SETZER_FEED")
log "Expires in `setzer --format "$expires"`"
if [ "$expires" -lt 3600 ]; then
  log "Expires in less than an hour, will update."
  needsupdate="yes"
fi

old=($(setzer peek "$SETZER_FEED"))
old=${old[0]}
new=$(setzer average $SETZER_SOURCES)
spread=$(setzer spread "$old" "$new")
log "Old ($old) New ($new) Spread ($spread)"
test=$(bc <<< "${spread#-} >= ${SETZER_SPREAD}")

if [[ ${test} -ne 0 ]]; then
  needsupdate="yes"
  log "Spread larger than $SETZER_SPREAD, will update."
fi

# Check if we have transactions pending
ptn=$PENDING_TRANSACTION_NONCE
if [[ $ptn ]]; then
  nonce=$(seth nonce $ETH_FROM)
  [[ "$nonce" -gt "$ptn"  ]] && mined="yes"
fi

if [[ $mined ]]; then
  #reset gas
  log "SUCCESS! Feed updated. Gas price was $ETH_GAS_PRICE wei"
  export PENDING_TRANSACTION_NONCE=
  export ETH_GAS_PRICE=$SETZER_INITIAL_GAS_PRICE
else
  if [[ $ptn ]]; then
    export CURRENT_LOOP=$(($CURRENT_LOOP + 1))
    # increase gas price
    newgasprice=$(($ETH_GAS_PRICE + $SETZER_GAS_PRICE_INCREMENT))
    if [[ $newgasprice -le $SETZER_MAX_GAS_PRICE ]]; then
      export ETH_GAS_PRICE=$newgasprice
      log "New gas price: $ETH_GAS_PRICE"
      needsupdate="yes"
    else
      log "Max gas price reached ($SETZER_MAX_GAS_PRICE)... What to do?"
      needsupdate=
    fi
  fi
fi

if [[ $needsupdate ]]; then
  [[ ! $SETZER_AUTO ]] && read -r -p "Are you sure? [y/N] " response
  if [[ $SETZER_AUTO || "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
    CURRENT_LOOP=1
    # TODO: check if $PENDING_TRANSACTION_NONCE
    nonce=$(seth nonce "$ETH_FROM")
    export ETH_NONCE=$nonce
    until=$(date +%s -d'+6 hour')
    log "Sending with nonce $ETH_NONCE"
    tx=$(setzer post "$SETZER_FEED" "$new" "$until" "$SETZER_MEDIANIZER")
    if [[ $tx ]]; then
      log $tx
      export PENDING_TRANSACTION_NONCE=$nonce
    fi
  fi
fi

if [ $PENDING_TRANSACTION_NONCE ]; then
  wait=$SETZER_WAIT_FOR_RESEND
else
  wait=$SETZER_INTERVAL_SECONDS
fi
log Waiting "$wait" seconds
sleep $wait
exec "$0" "$@"
